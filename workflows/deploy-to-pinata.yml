name: Deploy static site to Pinata & auto-update Cloudflare DNSLink

on:
  push:
    branches:
      - main  # 推送到 main 分支时自动执行

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🔹 上传整个仓库（包含 index.html）
      - name: Upload entire repo to Pinata
        id: pin
        uses: anantaramdas/ipfs-pinata-deploy-action@v1.6.0
        with:
          pin-name: webzoou
          path: '.'  # 上传整个仓库根目录
          pinata-api-key: ${{ secrets.PINATA_API_KEY }}
          pinata-secret-api-key: ${{ secrets.PINATA_SECRET_API_KEY }}

      - name: Output new CID
        run: echo "✅ New CID: ${{ steps.pin.outputs.hash }}"

      # 🔹 获取 Cloudflare 上当前的 DNS TXT 记录
      - name: Get current Cloudflare DNS record
        id: get
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_DNS_NAME: ${{ secrets.CF_DNS_NAME }}
        run: |
          echo "Fetching existing DNSLink record..."
          curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records?type=TXT&name=${CF_DNS_NAME}" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -o response.json

          RECORD_ID=$(jq -r '.result[0].id // empty' response.json)
          CURRENT_CONTENT=$(jq -r '.result[0].content // empty' response.json)
          CURRENT_CID=$(echo "$CURRENT_CONTENT" | sed -n 's/.*\/ipfs\/\([a-zA-Z0-9]*\).*/\1/p' || true)

          echo "record_id=${RECORD_ID}" >> $GITHUB_OUTPUT
          echo "current_cid=${CURRENT_CID}" >> $GITHUB_OUTPUT
          echo "Current CID: $CURRENT_CID"

      # 🔹 更新 Cloudflare DNS TXT 记录为最新 CID
      - name: Update DNSLink record on Cloudflare
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_DNS_NAME: ${{ secrets.CF_DNS_NAME }}
        run: |
          RECORD_ID="${{ steps.get.outputs.record_id }}"
          NEW_CID="${{ steps.pin.outputs.hash }}"
          NEW_CONTENT="dnslink=/ipfs/${NEW_CID}"

          if [ -n "$RECORD_ID" ]; then
            echo "🌀 Updating existing record..."
            curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records/${RECORD_ID}" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" -H "Content-Type: application/json" \
              --data "{\"type\":\"TXT\",\"name\":\"${CF_DNS_NAME}\",\"content\":\"${NEW_CONTENT}\",\"ttl\":120}"
          else
            echo "🆕 Creating new record..."
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/dns_records" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" -H "Content-Type: application/json" \
              --data "{\"type\":\"TXT\",\"name\":\"${CF_DNS_NAME}\",\"content\":\"${NEW_CONTENT}\",\"ttl\":120}"
          fi

      # 🔹 自动删除旧版本（防止 Pinata 占满空间）
      - name: Unpin previous CID (if exists)
        if: ${{ steps.get.outputs.current_cid != '' && steps.get.outputs.current_cid != steps.pin.outputs.hash }}
        env:
          PINATA_JWT: ${{ secrets.PINATA_JWT }}
        run: |
          OLD="${{ steps.get.outputs.current_cid }}"
          echo "🧹 Unpinning old CID: $OLD"
          curl -s -X DELETE "https://api.pinata.cloud/pinning/unpin/${OLD}" \
            -H "Authorization: Bearer ${PINATA_JWT}" \
            -H "Content-Type: application/json" || echo "⚠️ Failed to unpin (might already be removed)"

      - name: ✅ Deployment Summary
        run: |
          echo "✅ New CID: ${{ steps.pin.outputs.hash }}"
          echo "✅ DNSLink updated for ${{ secrets.CF_DNS_NAME }}"
